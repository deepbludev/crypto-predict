# Docker Compose file for the Cryptopredict project
#
# This file is used to run the Cryptopredict project in Docker containers
# for development purposes.

name: cryptopredict-dev

networks:
  cryptopredict-network:
    driver: bridge
    
volumes:
  redpanda: null

services:
  # ----------------------------------------
  # --- Trades service
  # ----------------------------------------
  trades:
    container_name: trades
    depends_on:
      - redpanda
    build:
      context: .
      dockerfile: .docker/Dockerfile
      args:
        SERVICE_NAME: trades
        PORT: 8001
    command: fastapi dev app/services/trades/trades --port 8001
    ports:
      - 8001:8001
    environment:
      - TRADES_BROKER_ADDRESS=redpanda:9092
    env_file:
      - services/trades/.env
    restart: always
    networks:
      - cryptopredict-network

  # ----------------------------------------
  # --- Candles service
  # ----------------------------------------
  candles:
    container_name: candles
    depends_on:
      - redpanda
    build:
      context: .
      dockerfile: .docker/Dockerfile
      args:
        SERVICE_NAME: candles
        PORT: 8002
    command: fastapi dev app/services/candles/candles --port 8002
    ports:
      - 8002:8002
    environment:
      - CANDLES_BROKER_ADDRESS=redpanda:9092
    env_file:
      - services/candles/.env
    restart: always
    networks:
      - cryptopredict-network

  # ----------------------------------------
  # --- TA service
  # ----------------------------------------
  ta:
    container_name: ta
    depends_on:
      - redpanda
    build:
      context: .
      dockerfile: .docker/Dockerfile
      args:
        SERVICE_NAME: ta
        PORT: 8003
    command: fastapi dev app/services/ta/ta --port 8003
    ports:
      - 8003:8003
    environment:
      - TA_BROKER_ADDRESS=redpanda:9092
    env_file:
      - services/ta/.env
    restart: always
    networks:
      - cryptopredict-network

  # ----------------------------------------
  # --- Features service
  # ----------------------------------------
  features:
    container_name: features
    depends_on:
      - redpanda
    build:
      context: .
      dockerfile: .docker/Dockerfile
      args:
        SERVICE_NAME: features
        PORT: 8004
    command: fastapi dev app/services/features/features --port 8004
    ports:
      - 8004:8004
    networks:
      - cryptopredict-network

    
  # ----------------------------------------
  # --- Messagebus
  # ----------------------------------------
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.21
    container_name: messagebus-redpanda
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - cryptopredict-network
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
      
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.7.2
    container_name: messagebus-console
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8080:8080
    networks:
      - cryptopredict-network
    depends_on:
      - redpanda